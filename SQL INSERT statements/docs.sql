/*
-- Query: SELECT * FROM cours.docs
LIMIT 0, 200

-- Date: 2020-04-29 16:30
*/
INSERT INTO `docs` (`id`,`ar_name`,`article`) VALUES (1,'Разделение содержимого и представления','<p>\r\n	HTML никогда не предназначался для визуального представления, однако пользовательские агенты вводили элементы, форматировавшие текст, а разработчики находили способы манипулирования макетом веб-страницы. С появлением технологии CSS отпала всякая необходимость использовать HTML в дизайнерских целях, содержимое (HTML) теперь может быть полностью отделено от визуального представления (CSS).</p>\r\n<p>\r\n	У этого подхода масса преимуществ &ndash; значительно уменьшается размер файла, повышается гибкость, так как одна центральная таблица стилей может применяться ко всему сайту, а не к каждой отдельной странице, у веб-страниц более широкая доступность.</p>\r\n<p>\r\n	Такая философия, прежде всего, подразумевает, что в коде HTML не должно быть ничего, определяющего стиль документа. Теги вроде <strong>&lt;font&gt;</strong> и атрибуты вроде <em><strong>bgcolor</strong></em> должны быть исключены. Даже атрибут <em><strong>border</strong></em> в теге вставки изображения<strong>&lt;img&gt;</strong> по стандартам XHTML 1.1 считается неприемлемым. Это вовсе не проблема, - нет такого стиля, который можно было бы сделать средствами HTML, и который нельзя было бы сделать, и сделать лучше, средствами CSS.</p>\r\n<p>\r\n	Речь идет не только о том, чтобы увести визуальное представление из сферы ответственности HTML, &quot;приложение содержимого&quot; означает, что все теги HTML должны использоваться для тех целей, для которых они и предназначались. Например, теги &lt;h1&gt;, &lt;h2&gt; и т.п. должны использоваться для создания заголовков, не следует одними только средствами CSS увеличивать размер шрифтов.</p>\r\n<p>\r\n	Здесь хорошим ориентиром может стать следующее: если браузер, с его стилями по умолчанию, отображает документ без встроенных таблиц стилей корректно, то все сделано правильно.</p>\r\n<p>\r\n	Нельзя использовать таблицы для разметки веб-страниц &ndash; таблицы предназначены только для отображения табличных данных. Это самое трудное условие для уже опытного HTML разработчика, так как полностью меняет традиционный способ создания структуры документа. Бестабличная компоновка страниц значительным образом уменьшает размер веб-страниц, и благодаря тому, что код получается линейным, он становится более доступен для различных устройств и систем чтения с экрана.</p>\r\n');
INSERT INTO `docs` (`id`,`ar_name`,`article`) VALUES (3,'Основные составляющие документа','<p>\r\n	Веб-страницы могут и будут отличаться друг от друга, но все они, преимущественно, состоят из аналогичных стандартных компонентов, если только страница не отображает полноэкранное видео или игру, не является частью какого-либо художественного проекта или просто плохо структурирована:</p>\r\n<p>\r\n	<strong>Заголовок</strong></p>\r\n<p>\r\n	Обычно это большая полоса вверху страницы,&nbsp;&nbsp;с крупным заголовком и / или логотипом. Здесь указывается общая информация о веб-сайте, не меняющаяся от страницы к странице.</p>\r\n<p>\r\n	<strong>Навигационное меню</strong></p>\r\n<p>\r\n	Ссылки на основные разделы сайта; обычно в виде кнопок, ссылок или вкладок.&nbsp;Также как и заголовок, навигация остается неизменной&nbsp;на всех страницах сайта&nbsp;&mdash; наличие непоследовательной навигации на Вашем сайте запутает и разочарует пользователей.&nbsp;Многие веб-дизайнеры считают панель навигации частью заголовка, а не отдельным компонентом, но это не является обязательным требованием; на самом деле, некоторые также утверждают, что их разделение на отдельные компоненты улучшает&nbsp;доступность, поскольку раздельная структура будет понятнее для людей, пользующихся считывателями экрана.</p>\r\n<p>\r\n	<strong>Основное содержимое</strong></p>\r\n<p>\r\n	Большая область&nbsp;в центре страницы, содержащая, в основном,&nbsp;уникальный контент&nbsp;данной веб-страницы, например&nbsp;видео, которое вы хотите посмотреть, или рассказ, который вы читаете, или карту, которую вы хотите просмотреть, или заголовки новостей и т.&nbsp;д. Это одна из частей сайта, которая определенно будет меняться от страницы к странице!</p>\r\n<p>\r\n	<strong>Боковая панель</strong></p>\r\n<p>\r\n	Как правило, содержит некоторую второстепенную информацию, ссылки, цитаты, рекламу и т.д. Обычно она относится к содержимому в основном контенте (например, на странице со статьей, боковая панель может содержать биографию автора или ссылки на связанные статьи), но в некоторых случаях здесь размещают&nbsp;и другие элементы, например, вторичную навигационную систему.</p>\r\n<p>\r\n	<strong>Нижний колонтитул (футер)</strong></p>\r\n<p>\r\n	Полоса в нижней части страницы, которая обычно содержит уведомления об авторских правах или контактную информацию. Это место для размещения общей информации (например, заголовка), но обычно эта информация не является критичной или вторична для самого веб-сайта. Нижний колонтитул также иногда используется для&nbsp;SEO целей, предоставляя ссылки для быстрого доступа к популярному контенту.</p>\r\n<p>\r\n	В своём&nbsp;HTML-коде Вы можете размечать разделы содержимого сайта на основе их <em>функциональности</em>&nbsp;&mdash; использовать элементы, которые представляют разделы контента, описанные выше, а вспомогательные технологии, такие как программы чтения с экрана, смогут распознавать эти элементы и помогать в таких задачах, как &quot;найти основную навигацию&quot; или &quot;найти основное содержимое&quot;</p>\r\n<p>\r\n	Для реализации такой семантической разметки HTML предоставляет выделенные теги, которые можно использовать для создания таких разделов, например:</p>\r\n<ul>\r\n	<li>\r\n		Заголовок: &lt;header&gt;.</li>\r\n	<li>\r\n		Навигационное меню: &lt;nav&gt;.</li>\r\n	<li>\r\n		Основное содержимое: &lt;main&gt;, с различными подразделами содержимого, представленными элементами &lt;article&gt;, &lt;section&gt;&nbsp;и &lt;div&gt;.</li>\r\n	<li>\r\n		Боковая панель: &lt;aside&gt;, обычно располагается внутри &lt;main&gt;.</li>\r\n	<li>\r\n		Нижний колонтитул: &lt;footer&gt;.</li>\r\n</ul>\r\n');
INSERT INTO `docs` (`id`,`ar_name`,`article`) VALUES (4,'Зачем понадобилось разделять содержимое и оформление html страниц?','<p>\r\n	На заре веб-разработки html использовался не только для создания структуры документа, но и для его оформления. Это приводило не просто к тому, что страницы выглядели неказисто и однообразно, а к тому, что код страницы становился крайне громоздким и сложным для восприятия, к тому же процесс корректировки внешнего вида становился достаточно нетривиальной задачей, поскольку для изменения оформления нескольких элементов необходимо было поменять оформление каждого из них вручную.</p>\r\n<p>\r\n	Пример кода с оформлением на чистом html:</p>\r\n<p>\r\n	&lt;h1 align=&quot;center&quot;&gt;Главный заголовок страницы&lt;/h1&gt;</p>\r\n<p>\r\n	&lt;font face&quot;Cuprum&quot;,Arial,Verdana &quot;&nbsp; size=&quot;3&quot; color=&quot;<em>#060606&quot;&gt;</em></p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Текст страницы</p>\r\n<p>\r\n	&lt;/font&gt;</p>\r\n<p>\r\n	&lt;hr size=&quot;1px&quot; width=&quot;980px&quot;&nbsp; color=&quot;#c8c8c8&quot; align=&quot;left&quot;/&gt;</p>\r\n<p>\r\n	Теперь пройдемся подробнее по <strong>основным причинам перехода от чистого html к html + css</strong>:</p>\r\n<ul>\r\n	<li>\r\n		Слишком громоздкий код страницы значительно увеличивал размер файла, что ухудшало время загрузки страницы и увеличивало нагрузку на сервер.</li>\r\n	<li>\r\n		Смешивание &laquo;логической&raquo; и &laquo;визуальной&raquo; части оформления приводило к ухудшению индексации страниц поисковыми роботами.</li>\r\n	<li>\r\n		Адаптация внешнего вида сайта под различные типы браузеров и устройств становилась невозможна.</li>\r\n	<li>\r\n		Код становился &laquo;грязным&raquo; не читабельным, что усложняло его поддержку веб-разработчиками.</li>\r\n	<li>\r\n		Ограниченность функционала оформления тегами приводила к однообразному и пресному внешнему виду сайтов. При помощи одних только атрибутов невозможно настроить полноценное оформление сайта.</li>\r\n	<li>\r\n		Внесение изменений в дизайн становилось крайне трудоемкой задачей, поскольку оформление приходилось менять каждому конкретному элементу, без возможности задания его целой группе элементов в один прием.</li>\r\n</ul>\r\n<p>\r\n	После внедрения стандарта css он решил множество проблем и позволил наконец html-лю стать тем, чем он и задумывался - языком логической разметки документа.</p>\r\n<p>\r\n	<strong>Что изменилось с внедрением css?</strong></p>\r\n<ul>\r\n	<li>\r\n		Разделение структуры документа на логическую разметку и оформление сделало код значительно &laquo;чище&raquo;, то есть читабельней, понятней для восприятия.</li>\r\n	<li>\r\n		Появилась возможность адаптации сайтов для различных устройств за счет подключения для них различных правил оформления.</li>\r\n	<li>\r\n		Один файл css может оформлять все страницы сайта, что позволяет значительно снизить трудоемкость веб-разработки, размер сайта в целом.</li>\r\n	<li>\r\n		Простота применения каскадных таблиц стилей значительно сократила время на веб-разработку.</li>\r\n	<li>\r\n		За счет кеширования файла с оформлением сайта на порядок ускорилось время загрузки страниц сайтов и снизилась нагрузка на сервера в целом.</li>\r\n</ul>\r\n<p>\r\n	<strong>Подводя итоги</strong></p>\r\n<p>\r\n	CSS это революционная для своего времени технология перевернувшая мир веб-разработки с ног на голову много лет назад. На сегодняшний день это официальный стандарт, повсеместно использующийся в веб-разработке для оформления логической части сайтов. Он достаточно прост в освоении и крайне гибок в использовании.</p>\r\n');
