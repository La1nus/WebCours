-- phpMyAdmin SQL Dump
-- version 5.0.2
-- https://www.phpmyadmin.net/
--
-- Хост: localhost
-- Время создания: Май 09 2021 г., 16:07
-- Версия сервера: 5.7.27-30
-- Версия PHP: 7.1.30

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `u1374354_web_cours`
--

-- --------------------------------------------------------

--
-- Структура таблицы `css`
--

CREATE TABLE `css` (
  `id` int(11) NOT NULL,
  `ar_name` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `article` text COLLATE utf8mb4_unicode_ci,
  `description` text COLLATE utf8mb4_unicode_ci,
  `date` date DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `css`
--

INSERT INTO `css` (`id`, `ar_name`, `article`, `description`, `date`) VALUES
(3, 'Каскадные таблицы стилей', '<p><strong>CSS</strong>&nbsp;(англ. Cascading Style Sheets &mdash; каскадные таблицы стилей) &mdash; технология описания внешнего вида документа, оформленного языком разметки.</p>\r\n\r\n<p>Преимущественно используется как средство оформления веб-страниц в формате HTML и XHTML, но может применяться с любыми видами документов в формате XML, включая SVG и XUL.</p>\r\n\r\n<p>Каскадные таблицы стилей используются создателями веб-страниц для задания цветов, шрифтов, расположения и других аспектов представления веб-документа. Основной целью разработки CSS являлось разделение содержимого (написанного на HTML или другом языке разметки) и оформления документа (написанного на CSS). Это разделение может увеличить доступность документа, предоставить большую гибкость и возможность управления его представлением, а также уменьшить сложность и повторяемость в структурном содержимом. Кроме того, CSS позволяет представлять один и тот же документ в различных стилях или методах вывода, таких как экранное представление, печать, чтение голосом (специальным голосовым браузером или программой чтения с экрана), или при выводе устройствами, использующими шрифт Брайля.</p>\r\n\r\n<h2>Что такое CSS?</h2>\r\n\r\n<p>Каскадные таблицы стилей (Cascading Style Sheets, CSS) &mdash; это стандарт, определяющий представление данных в браузере. Если HTML предоставляет информацию о структуре документа, то таблицы стилей сообщают как он должен выглядеть.</p>\r\n\r\n<p>Стиль &mdash; это совокупность правил, применяемых к элементу гипертекста и определяющих способ его отображения. Стиль включает все типы элементов дизайна: шрифт, фон, текст, цвета ссылок, поля и расположение объектов на странице.</p>\r\n\r\n<p>Таблица стилей &mdash; это совокупность стилей, применимых к гипертекстовому документу.</p>\r\n\r\n<p>Каскадирование &mdash; это порядок применения различных стилей к веб-странице. Браузер, поддерживающий таблицы стилей, будет последовательно применять их в соответствии с приоритетом: сначала связанные, затем внедренные и, наконец, встроенные стили. Другой аспект каскадирования &mdash; наследование (inheritance), &mdash; означает, что если не указано иное, то конкретный стиль будет применен ко всем дочерним элементами гипертекстового документа. Например, если вы примените определенный цвет текста в теге &lt;div&gt;, то все теги внутри этого блока будут отображаться этим же цветом.</p>\r\n\r\n<p>Использование каскадных таблиц дает возможность разделить содержимое и его представление и гибко управлять отображением гипертекстовых документов путем изменения стилей.</p>\r\n\r\n<p>Официальная информация о спецификации Cascading Style Sheets всегда доступна по адресу&nbsp;<a href=\"http://www.w3.org/Style/CSS/\">http://www.w3.org/Style/CSS/</a></p>\r\n\r\n<h2>Общий синтаксис таблиц стилей</h2>\r\n\r\n<p>Таблицы стилей строятся в соответствии с определенным порядком (синтаксисом), в противном случае они не могут нормально работать. Таблицы стилей составляются из определенных частей (рис. 1):</p>\r\n\r\n<p><img alt=\"../_images/css-rule.png\" src=\"https://iit-web-lectures.readthedocs.io/ru/latest/_images/css-rule.png\" /></p>\r\n\r\n<p>Рис. 1. Синтаксис описания стиля CSS</p>\r\n\r\n<ul>\r\n	<li>Селектор (Selector). Селектор &mdash; это элемент, к которому будут применяться назначаемые стили. Это может быть тег, класс или идентификатор объекта гипертекстового документа.</li>\r\n	<li>Свойство (Property). Свойство определяет одну или несколько характеристик селектора. Свойства задают формат отображения селектора: отступы, шрифты, выравнивание, размеры и т.д.</li>\r\n	<li>Значение (Value). Значения &mdash; это фактические числовые или строковые константы, определяющие свойство селектора.</li>\r\n	<li>Описание (Declaration). Совокупность свойств и их значений.</li>\r\n	<li>Правило (Rule). Полное описание стиля (селектор + описание).</li>\r\n</ul>\r\n\r\n<p>Таким образом, таблица стилей &mdash; это набор правил, задающих значения свойств селекторов, перечисленных в этой таблице. Общий синтаксис описания правила выглядит так:</p>\r\n\r\n<p>селектор[, селектор[, ...]] {свойство: значение;}</p>\r\n\r\n<p>Регистр символов значения не имеет, порядок перечисления селекторов в таблице и свойств в определении не регламентирован.</p>\r\n\r\n<h3>Правила CSS</h3>\r\n\r\n<p>Итак, каскадная таблица стилей &mdash; это набор правил форматирования тегов HTML. Приведем несколько примеров написания таких правил:</p>\r\n\r\n<ol>\r\n	<li>Основной текст с выравниванием по ширине, абзацный отступ 30px, гарнитура (шрифт) &mdash; Serif, кегль (размер шрифта) &mdash; 14px:</li>\r\n</ol>\r\n\r\n<pre>\r\n<code class=\"language-css\">p {\r\n    text-align: justify;\r\n    text-indent: 30px;\r\n    font-family: Serif;\r\n    font-size: 14px;\r\n    }</code></pre>\r\n\r\n<p>Это правило будет применено ко всем тегам &lt;p&gt;.</p>\r\n\r\n<ol start=\"2\">\r\n	<li>Синий цвет для заголовков с первого по третий уровень:</li>\r\n</ol>\r\n\r\n<pre>\r\n<code class=\"language-css\">h1, h2, h3 {\r\n    color: blue; /* тоже самое, что и #0000FF */\r\n}</code></pre>\r\n\r\n<ol start=\"3\">\r\n	<li>Таблицы и изображения выводить без обрамления:</li>\r\n</ol>\r\n\r\n<pre>\r\n<code class=\"language-css\">table, img {border: none;}</code></pre>\r\n\r\n<ol start=\"4\">\r\n	<li>Ссылки в элементах списков показывать без подчеркивания:</li>\r\n</ol>\r\n\r\n<pre>\r\n<code class=\"language-css\">li a {text-decoration: none;}</code></pre>\r\n\r\n<ol start=\"5\">\r\n	<li>Внутренние отступы слева и справа для блоков (&lt;div&gt;), заголовков таблиц и ячеек таблиц установить в 10px и залить фон желтым цветом:</li>\r\n</ol>\r\n\r\n<pre>\r\n<code class=\"language-css\">div, th, td {\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    background-color: yellow;\r\n}</code></pre>\r\n\r\n<ol start=\"6\">\r\n	<li>Все ссылки в документе отображать черным цветом и полужирным шрифтом, а в основном тексте и списках &mdash; обычным, а также выделять их зеленым цветом и подчеркивать только при наведении курсора (в описании правил использован псевдоэлемент a:hover).</li>\r\n</ol>\r\n\r\n<pre>\r\n<code class=\"language-css\">a {color: black; font-weight: bold;}\r\np a, li a {font-weight: normal; text-decoration: none;}\r\np a:hover, li a:hover {\r\n    color: #00FF00; text-decoration: underline;\r\n    }</code></pre>\r\n\r\n<h3>Классы</h3>\r\n\r\n<p>Стандарт CSS представляет возможности создания именованных стилей &mdash; стилевых классов. Это позволяет ответить на такой, например, вопрос: Как применить разные стили к одному и тому же селектору?</p>\r\n\r\n<p>Предположим, что в документе вам нужны два различных вида основного текста &mdash; один без отступа, второй &mdash; с левым отступом и шрифтом красного цвета. Для этого нужно создать правила для каждого из них, например так:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">p {margin-left: 0;}\r\np.warn {margin-left: 40px; color: #FF00;}</code></pre>\r\n\r\n<p>Для применения созданного класса его имя нужно указать в атрибуте class для выбранных абзацев:</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;p class=”warn”&gt;Красный текст с отступом слева&lt;/p&gt;</code></pre>\r\n\r\n<p>Общий синтаксис описания класса:</p>\r\n\r\n<p>селектор.имя_класса {описание}</p>\r\n\r\n<p>При создании класса селектор можно не указывать, тогда это правило можно применять к любому селектору, поддерживающему тот же набор свойств.</p>\r\n\r\n<p>Вот несколько примеров:</p>\r\n\r\n<p>Правило:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">.solid_blue {color: blue;}</code></pre>\r\n\r\n<p>Использование:</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;p class=”solid_blue”&gt;Синий текст абзаца&lt;/p&gt;\r\n&lt;li class=”solid_blue”&gt;Синий текст элемента списка&lt;/li&gt;</code></pre>\r\n\r\n<p>Правило:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">h1.bigsans  {font-family: Sans; font-size: 1.5em;}\r\nh1.smallserif       {font-family: Serif; font-size: .84em;}</code></pre>\r\n\r\n<p>Использование:</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;h1 class=”bigsans”&gt;Большой, но рубленый&lt;/h1&gt;\r\n&lt;h1 class=”smallserif”&gt;Маленький, но с засечками&lt;/h1&gt;</code></pre>\r\n\r\n<h3>Идентификаторы</h3>\r\n\r\n<p>В качестве селектора может выступать идентификатор элемента гипертекста, указанный в атрибуте id. Для назначения стилей таким элементам используется синтаксис, аналогичный описанию классов, но вместо точки ставится знак # (&ldquo;решетка&rdquo;). Например:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">div#content {\r\n    position: absolute;\r\n    top: 10px;\r\n    left: 10%;\r\n    right: 10%;\r\n    border: solid 1px silver;\r\n    }\r\n    ...</code></pre>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;div id=\"content\"&gt;Текст&lt;/div&gt;</code></pre>\r\n\r\n<p>Следует помнить, что идентификаторы элементов должны быть уникальны в пределах документа.</p>\r\n\r\n<h3>Группировка свойств</h3>\r\n\r\n<p>Группировка (grouping) состоит в объединении значений родственных свойств. При этом таблица стилей становится более компактной, но предъявляются более жесткие требования к описанию правил. Ниже приведен пример обычного стиля, задающего отступы:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">div {\r\n    margin-left: 10px;\r\n    margin-top: 5px;\r\n    margin-right: 40px;\r\n    margin-bottom: 15px;\r\n    }</code></pre>\r\n\r\n<p>Это же правило можно переписать с группировкой в следующем виде:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">div {margin: 5px 40px 15px 10px;} /*порядок: top right bottom left*/</code></pre>\r\n\r\n<p>Оба стиля будут отображаться одинаково.</p>\r\n\r\n<p>Группировка может применяться для таких свойств, как padding, font, border, background и еще некоторых (см. документацию CSS)</p>\r\n\r\n<h2>Использование в веб-страницах</h2>\r\n\r\n<p>Существует три способа применения таблицы стилей к документу HTML:</p>\r\n\r\n<ul>\r\n	<li>Встраивание (Inline). Этот метод позволяет применить стиль к заданному тегу HTML.</li>\r\n	<li>Внедрение (Embedded). Внедрение позволяет управлять стилями страницы целиком.</li>\r\n	<li>Связывание (Linked или External). Связанная таблица стилей позволяет вынести описание стилей во внешний файл, ссылаясь на который можно контролировать отображение всех страниц сайта.</li>\r\n</ul>\r\n\r\n<h3>Встроенные стили</h3>\r\n\r\n<p>Встраивание стилей предоставляет максимальный контроль над всеми элементами веб-страницы. Встроенный стиль применяется к любому тегу HTML с помощью атрибута style следующим образом:</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;p style=\"font: 12pt Courier\"&gt;Это текст с кеглем 12 точек и гарнитурой Courier&lt;/P&gt;</code></pre>\r\n\r\n<p>Пример:</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;div style=\"font-family: Garamond; font-size: 18 pt;&gt;\"\r\nВесь текст в этом разделе имеет размер 18 точек и шрифт Garamond.\r\n&lt;span style=\"color:#ff3300;\"&gt;\r\nА этот фрагмент еще и выделен красным цветом.&lt;/span&gt;\r\n&lt;/div&gt;</code></pre>\r\n\r\n<p>Встроенные стили полезны, когда необходима тонкая настройка отображения некоторого элемента страницы или небольшой веб-страницы.</p>\r\n\r\n<h3>Внедренные стили</h3>\r\n\r\n<p>Внедренные стили используют тег &lt;style&gt;, который обычно размещают в заголовке HTML-документа (&lt;head&gt;...&lt;/head&gt;):</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;html&gt;\r\n&lt;head&gt;\r\n    ...\r\n    &lt;style&gt;\r\n        правила CSS\r\n    &lt;/style&gt;\r\n\r\n    ...\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n...</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', '<p><strong>CSS</strong>&nbsp;(англ. Cascading Style Sheets &mdash; каскадные таблицы стилей) &mdash; технология описания внешнего вида документа, оформленного языком разметки.</p>\r\n\r\n<p>Преимущественно используется как средство оформления веб-страниц в формате HTML и XHTML, но может применяться с любыми видами документов в формате XML, включая SVG и XUL.</p>\r\n', '2021-04-02'),
(9, 'Таблица стилей CSS. Структура CSS правила. CSS свойства и значения. Комментарии в CSS', '<p><strong>Таблица стилей&nbsp;</strong><strong>CSS</strong>&nbsp;&ndash; это не решение всех проблем, которые связаны с оформлением HTML документов, более того, CSS не избавит вас от всех трудностей оформления, но таблица стилей позволяет упростить внесение изменений в HTML страницу.</p>\r\n\r\n<p>Основной особенность CSS является то, что каскадная таблица стилей позволяет вносить изменение и применять определенные правила для каждого элемента сформированного браузером. Допустим, у нас есть&nbsp;HTML список,&nbsp;маркированный HTML список, который формируется при помощи тегов &lt;ul&gt; и &lt;li&gt;:</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;ul&gt;\r\n&lt;li&gt;Первый пункт&lt;/li&gt;\r\n&lt;li&gt; Второй пункт &lt;/li&gt;\r\n&lt;li&gt; Третий пункт &lt;/li&gt;\r\n&lt;li&gt; Четвертый пункт &lt;/li&gt;\r\n&lt;/ul&gt;</code></pre>\r\n\r\n<p><br />\r\nВыглядит созданный&nbsp;HTML список&nbsp;примерно так:</p>\r\n\r\n<p><img alt=\"HTML список\" src=\"https://zametkinapolyah.ru/wp-content/uploads/2012/12/html_spisok.png\" title=\"HTML список\" /></p>\r\n\r\n<p>Предположим, что мы хотим сделать оранжевым цвет текста каждого пункта&nbsp;HTML списка, в HTML для этих целей есть тег &lt;font&gt;, у которого есть атрибут color (цвета в HTML, таблица RGB):</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;ul&gt;\r\n&lt;li&lt;font color=\"orange\"&gt; Первый пункт&lt;/font&gt;&lt;/li&gt;\r\n&lt;li&gt;&lt;font color=\"orange\"&gt; Второй пункт&lt;/font&gt; &lt;/li&gt;\r\n&lt;li&gt;&lt;font color=\"orange\"&gt; Третий пункт&lt;/font&gt; &lt;/li&gt;\r\n&lt;li&gt;&lt;font color=\"orange\"&gt; Четвертый пункт&lt;/font&gt; &lt;/li&gt;\r\n&lt;/ul&gt;</code></pre>\r\n\r\n<p>Так будет выглядеть&nbsp;HTML список&nbsp;после внесенных изменений:</p>\r\n\r\n<p><img alt=\"html список и тег &lt;font&gt;\" src=\"https://zametkinapolyah.ru/wp-content/uploads/2012/12/html_spisok_font.png\" title=\"html список и тег &lt;font&gt;\" /></p>\r\n\r\n<p>Согласитесь, довольно нудно и долго писать для каждого пункта списка тег font и задавать атрибут color, хорошо, что в примере четыре пункта, а если их будет больше, а если через какое-то время мы захотим поменять цвет?</p>\r\n\r\n<p>Для этого и существует&nbsp;<strong>таблица стилей CSS</strong>, но чтобы ваш код был эффективен, нужно знать нехитрые CSS правила. CSS &ndash; это технология, которая позволяет вам создавать собственные правила отображения элементов на странице, эти правила легко и быстро можно изменять и применять их к любым элементам страницы. Теперь давайте вернемся к примеру и посмотрим, на сколько быстрее и проще можно изменить правила отображения элементов &lt;li&gt;. HTML страница будет выглядеть точно так же, как и в первом случае.</p>\r\n\r\n<p>А оформление мы выносим в отдельный документ с расширением .css,&nbsp;<em>css правила</em>&nbsp;можно задавать и внутри HTML страницы, но это считается дурным тоном, собственно о том, как подключить таблицу стилей к HTML документу мы поговори в другой публикации. А сейчас оформление:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">li{color:orange;}</code></pre>\r\n\r\n<p>Это CSS правило позволяет сделать текст всех элементов &lt;li&gt; на странице оранжевым. Более того, мы можем поменять цвет пунктов HTML списка, просто изменив одну строку и теперь нам не нужен тег &lt;font&gt; и его атрибуты. Чтобы изменить цвет пунктов HTML списка, мы просто меняем правила CSS и все. Неплохо, да?</p>\r\n\r\n<h3>Структура CSS правила. Синтаксис CSS. CSS значение и CSS свойство.</h3>\r\n\r\n<p>Для представления, что такое CSS, нужно понять структуру CSS правила и знать CSS синтаксис. Любое CSS правило состоит из двух частей: CSS селектор, при помощи CSS селекторов мы задаем элементы, к которым хотим применить CSS правила и блок объявлений CSS, блок объявлений может состоят из одного или нескольких CSS объявлений. В свою очередь, каждое объявление состоит из двух частей: CSS свойство и значение CSS.&nbsp; Таким образом, мы приходим к выводу, что каскадная таблица стилей CSS состоит из набора CSS правил.&nbsp;<strong>Пример CSS правила</strong>:</p>\r\n\r\n<p><img alt=\"Структура CSS правила\" src=\"https://zametkinapolyah.ru/wp-content/uploads/2012/12/css1.png\" title=\"Структура CSS правила\" /></p>\r\n\r\n<p>На рисунке вы можете видеть, что все стили, которые мы хотим задать для нужного HTML элемента или группы элементов заключаются в фигурные скобки, перед которыми пишется CSS селектор. Внутри фигурных скобок размещаются&nbsp;<em>CSS объявления</em>: пара CSS свойство и CSS значение, между собой они разделяются двоеточием, после каждого объявления ставится точка с запятой. Обратите внимание: у каждого CSS свойства имеется свой набор значений. Понятно, что цвет фона, заданный при помощи CSS свойства background-color, и цвет текста внутри элемента &lt;li&gt; будут применены к каждому элементу &lt;li&gt; HTML документа.</p>\r\n\r\n<p>Теперь давайте поговорим о&nbsp;<strong>синтаксисе&nbsp;</strong><strong>CSS</strong>. &nbsp;CSS нечувствителен к регистру символов, CSS нечувствителен к пробельным символам: переносам строк, табуляциям и пробелам; из всего вышесказанного следует, &ndash; &nbsp;форма записи CSS правил зависит только от желания разработчика, например:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">LI{Color: red; list-Style:NONE;}\r\np{\r\nbackground:gray;\r\nbotton-border: 1px;\r\n}</code></pre>\r\n\r\n<p><br />\r\nТо есть, вы можете писать все CSS свойства, CSS значения и правила в одну строку, так, как это записано для элемента &lt;li&gt;, а можете записывать каждое CSS объявление на новой строке. Второй вариант мне нравится больше просто потому, что такой код проще редактировать, с другой стороны лишние пробельные символы увеличивают объем файла, в котором хранятся CSS правила.</p>\r\n\r\n<h3>CSS стили, правила. Синтаксис CSS, комментарии CSS. Приоритет CSS.</h3>\r\n\r\n<p>И так, чтобы ваши таблицы стилей корректно работали, а вы получали то, что вы хотите, а не то, что получается, необходимо знать CSS синтаксис, набор нехитрых правил. Для начала нужно сказать, что CSS стили для одного элемента можно задавать внутри одного CSS правила, а можно это сделать путем создания нескольких CSS правил для одного элемента.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">menu{\r\ncolor: #545ff3\r\nlist-style: none;\r\ndisplay:inline;\r\n}</code></pre>\r\n\r\n<p>В данном случае мы задали&nbsp;<strong>CSS стили</strong>&nbsp;для&nbsp;тега &lt;menu&gt;&nbsp;внутри одного CSS правила.</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">table{color: orange;}\r\ntable{border: 1px;}\r\ntable{background: pink;}</code></pre>\r\n\r\n<p><br />\r\nВ данном случае мы создали несколько CSS правил для&nbsp;тега &lt;table&gt;, каждая пара CSS свойство и значение записана в отдельное CSS правило. Конечно, такая форма записи неудобна, приходится повторять CSS селектор и легко можно запутаться.</p>\r\n\r\n<p>Теперь давайте поговорим о&nbsp;<em>приоритете CSS правил</em>&nbsp;и объявлений, допустим у нас на странице есть элемент &lt;a&gt;, ссылка. И для этого элемента существует следующее CSS правило:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">a{\r\ncolor: red;\r\ncolor:blue;\r\n}</code></pre>\r\n\r\n<p>И как угадать, какого цвета будут ссылки в HTML документе? Очень просто, высший приоритет имеют CSS свойства, которые написаны ниже по коду. На самом деле применятся оба CSS свойства, просто вначале цвет ссылок станет красным, а затем синим, в итоге мы увидим синие ссылки.</p>\r\n\r\n<p>Обратите внимание: у каждого&nbsp;<em>CSS свойства</em>&nbsp;имеется строго определенный набор значений, которые они могут принимать.</p>\r\n\r\n<p>Ну и напоследок мы поговорим о CSS комментариях, комментарии в CSS нужны для того, чтобы на время отключить CSS стили, разделить таблицу стилей на логические части, закомментировать для себя какой-то участок кода. Обычно комментарии используются только при разработке и отладке шаблонов и макетов, либо в учебных целях, поскольку CSS комментарии увеличивают объем кода, а соответственно и время загрузки файла с таблицей стилей.</p>\r\n\r\n<p><strong>CSS комментарии</strong>&nbsp;бывают только блочными и могут располагаться в любом месте документа с расширением .css:</p>\r\n\r\n<pre>\r\n<code class=\"language-css\">/* CSS комментарий можетрасполагаться и занимать несколькострок *//* Стили для тега &lt;menu&gt; */\r\nmenu{\r\ncolor: #545ff3; /* цвет текста  */\r\nlist-style: none; /* убираем мерзкие маркеры  */\r\ndisplay:inline; /* отображать элемент &lt;menu&gt;, как строчный  */\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', '<p><strong>Таблица стилей&nbsp;</strong><strong>CSS</strong>&nbsp;&ndash; это не решение всех проблем, которые связаны с оформлением HTML документов, более того, CSS не избавит вас от всех трудностей оформления, но таблица стилей позволяет упростить внесение изменений в HTML страницу.</p>\r\n\r\n<p>Основной особенность CSS является то, что каскадная таблица стилей позволяет вносить изменение и применять определенные правила для каждого элемента сформированного браузером.</p>\r\n', '2021-05-06'),
(7, 'Каскадные Таблицы Стилей Для Начинающих', '<h1>Что Такое CSS: Каскадные Таблицы Стилей Для Начинающих</h1>\r\n\r\n<p><strong>CSS</strong>&nbsp;это язык каскадных таблиц стилей, который используется для стилизации элементов, написанных на языке разметки, например&nbsp;HTML. Он отделяет контент от визуального представления сайта. Давайте разберёмся, что такое&nbsp;CSS более детально.</p>\r\n\r\n<p>CSS был разработан&nbsp;<strong>W3C</strong>&nbsp;(World Wide Web Consortium) в 1996 году по довольно простой причине. В HTML не были разработаны теги, которые помогли бы отформатировать страницу. Нужно было только написать разметку для сайта.</p>\r\n\r\n<p>Такие теги, как&nbsp;, были введены в HTML версии 3.2, и это создало много проблем для разработчиков. Поскольку веб-сайты имели разные шрифты, цветной фон и стили, переписывать код было долгим, болезненным и дорогостоящим процессом. Таким образом, CSS был создан W3C для решения этой проблемы.</p>\r\n\r\n<p>Отношения между HTML и CSS сильно связаны между собой. Поскольку HTML &mdash; это язык разметки (сама основа сайта), а CSS подчеркивает стиль (всю эстетику сайта), они идут рука об руку.</p>\r\n\r\n<p>С технической точки зрения CSS не является необходимостью, но вы, вероятно, не захотите смотреть на сайт, который содержит только HTML, поскольку он будет выглядеть совершенно голым.</p>\r\n\r\n<ul>\r\n	<li>Преимущества CSS</li>\r\n	<li>Как работает CSS</li>\r\n	<li>Внутренние, Внешние и Встроенные стили СSS</li>\r\n	<li>Заключение</li>\r\n</ul>\r\n\r\n<h3>Преимущества CSS</h3>\r\n\r\n<p>Разница между сайтом, который реализует CSS, и тем, который не использует, огромна и, безусловно, заметна.</p>\r\n\r\n<p>Возможно, вы видели веб-сайт, который не загружается полностью и имеет белый фон с большей частью синего и черного текста. Это означает, что CSS-часть сайта не была загружена правильно или не существует вообще.</p>\r\n\r\n<p>Вот так выглядит сайт только с HTML, и я думаю, вы согласитесь, что это не очень привлекательно.</p>\r\n\r\n<p>Перед использованием CSS вся стилизация должна была быть включена в HTML-разметку. Это означает, что вы должны были отдельно описать весь фон, цвета шрифта, выравнивания и т. д.</p>\r\n\r\n<p>CSS позволяет стилизовать всё в другом файле, создавая там стиль, а затем интегрируя файл CSS поверх разметки HTML. Это делает реальную HTML-разметку намного чище и проще в обслуживании.</p>\r\n\r\n<p>Короче говоря, с помощью CSS вам не нужно многократно описывать внешний вид отдельных элементов. Это экономит время, сокращает код и делает его менее подверженным ошибкам.</p>\r\n\r\n<p>СSS позволяет иметь несколько стилей на одной HTML-странице, поэтому возможности настройки практически безграничны. В настоящее время это становится больше необходимостью, чем товаром.</p>\r\n\r\n<h3>Как работает CSS</h3>\r\n\r\n<p>CSS использует простой синтаксис на английском языке с набором правил, которые управляют им. Как мы уже упоминали ранее, HTML никогда не предназначался для использования элементов стиля, только разметки страницы. Он был создан, чтобы просто описать содержание. Например:&nbsp;<strong>&lt;p&gt;Это абзац.&lt;/p&gt;</strong>.</p>\r\n\r\n<p>Но как вы оформляете абзац? Структура синтаксиса СSS довольно проста. Имеет селектор и блок объявления. Вы выбираете элемент, а затем объявляете, что вы хотите с ним сделать. Довольно просто, правда?</p>\r\n\r\n<p>Однако есть правила, которые вы должны помнить. Правила структуры довольно просты, так что не волнуйтесь.</p>\r\n\r\n<p>Селектор указывает на элемент HTML, который вы хотите стилизовать. Блок объявлений содержит одно или несколько объявлений, разделённых точками с запятой.</p>\r\n\r\n<p>Каждое объявление включает имя свойства CSS и значение, разделённое двоеточием. Объявление СSS всегда заканчивается точкой с запятой, а блоки объявления заключаются в фигурные скобки.</p>\r\n\r\n<p>Давайте посмотрим на пример:</p>\r\n\r\n<p>Все элементы&nbsp;<strong>&lt;p&gt;</strong>&nbsp;будут выделены синим цветом и выделены жирным шрифтом.</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;style&gt;\r\n\r\np {\r\n\r\ncolor: blue;\r\n\r\ntext-weight: bold;\r\n\r\n}\r\n\r\n&lt;style&gt;</code></pre>\r\n\r\n<p>В другом примере все элементы&nbsp;<strong>&lt;p&gt;</strong>&nbsp;будут выровнены по центру, будут 16x шириной и розовыми.</p>\r\n\r\n<pre>\r\n<code>&lt;style&gt;\r\n\r\np {\r\n\r\ntext-align: center;\r\n\r\nfont-size: 16px;\r\n\r\ncolor: pink;\r\n\r\n}\r\n\r\n&lt;/style&gt;</code></pre>\r\n\r\n<p>Если вы планируете создать веб-сайт, убедитесь, что вы выбрали для него правильный конструктор сайтов. Hostinger может предложить простой конструктор с инструментом перетаскивания. Создайте веб-сайт, который будет отлично смотреться на любом устройстве, используйте один из бесплатных шаблонов, которые мы собрали в нашей базе, и выходите в интернет!</p>\r\n\r\n<h3>Внутренние, Внешние и Встроенные стили СSS</h3>\r\n\r\n<p>Мы кратко рассмотрим каждый стиль, для более подробного объяснения каждого метода, под обзором будет ссылка.</p>\r\n\r\n<p>Давайте начнём с разговора о&nbsp;<strong>Внутреннем</strong>&nbsp;стиле. Сделанные таким образом стили CSS загружаются при каждом обновлении веб-сайта, что может увеличить время загрузки. Кроме того, вы не сможете использовать один и тот же стиль СSS на нескольких страницах, который содержится на одной странице. Однако это также имеет свои преимущества. Наличие всего на одной странице облегчает обмен шаблоном для предварительного просмотра.</p>\r\n\r\n<p><strong>Внешний</strong>&nbsp;метод может быть наиболее удобным. Всё делается внешне в файле&nbsp;<strong>.css</strong>. Это означает, что вы можете делать все стили в отдельном файле и применять CSS к любой странице, которую вы хотите. Внешний стиль также может улучшить время загрузки.</p>\r\n\r\n<p>Наконец, мы поговорим о&nbsp;<strong>Встроенном</strong>&nbsp;стиле СSS. Он работает с конкретными элементами, имеющими тег</p>\r\n', '<p><strong>CSS</strong>&nbsp;это язык каскадных таблиц стилей, который используется для стилизации элементов, написанных на языке разметки, например&nbsp;HTML. Он отделяет контент от визуального представления сайта. Давайте разберёмся, что такое&nbsp;CSS более детально.</p>\r\n\r\n<p>CSS был разработан&nbsp;<strong>W3C</strong>&nbsp;(World Wide Web Consortium) в 1996 году по довольно простой причине. В HTML не были разработаны теги, которые помогли бы отформатировать страницу. Нужно было только написать разметку для сайта...</p>\r\n', '2021-05-06');

-- --------------------------------------------------------

--
-- Структура таблицы `docs`
--

CREATE TABLE `docs` (
  `id` int(11) NOT NULL,
  `ar_name` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `article` text COLLATE utf8mb4_unicode_ci,
  `description` text COLLATE utf8mb4_unicode_ci,
  `date` date DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `docs`
--

INSERT INTO `docs` (`id`, `ar_name`, `article`, `description`, `date`) VALUES
(5, 'Разделение структуры и представления', '<p>HTML происходит из SGML, который всегда был языком определения структурной разметки. По мере развития HTML все большее количество его элементов и атрибутов для представления заменяется другими механизмами, в частности, таблицами стилей. Опыт показывает, что отделение структуры документа от аспектов его представления снижает стоимость обслуживания широкого диапазона платформ, носителей и т.д. и упрощает изменение документов.</p>\r\n\r\n<p>Чтобы сделать свой Web-сервер доступным для всех пользователей, особенно для пользователей с физическими недостатками, авторы должны предполагать, как их документы могут отображаться на различных платформах: речевых браузерах, программах чтения азбуки Бройля и т.д. Мы не рекомендуем авторам ограничивать творческий процесс, но рекомендуем предусматривать альтернативные методы подачи информации. HTML предлагает ряд таких механизмов (например, атрибут alt, атрибут accesskey и т.д.)</p>\r\n\r\n<p>Авторам также следует иметь в виду, что к их документам могут обращаться пользователи с другой конфигурацией компьютеров. Для корректной интерпретации документов авторам следует включать в свои документы информацию о языке и направлении письма в тексте, о кодировке документа и прочую подобную информацию.</p>\r\n\r\n<p>При тщательной разработке таблиц и использовании новых возможностей HTML 4.0 авторы могут ускорить отображение документов агентами пользователей. Авторы могут прочесть здесь о том, как создавать таблицы для последовательного представления (см. элемент TABLE). Разработчики могут получить информацию об алгоритмах последовательного представления в замечаниях о таблицах в приложении.</p>\r\n\r\n<h2>Представление документа в формате HTML</h2>\r\n\r\n<p>Раздел набор символов документа относится к вопросу об абстрактных символах, которые могут входить в состав документа в формате HTML. В число этих символов входят латинская буква &laquo;A&raquo;, кириллическая буква &laquo;I&raquo;, китайский иероглиф &laquo;вода&raquo; и т.д.</p>\r\n\r\n<p>Раздел кодировки символов относится к вопросу о том, как эти символы могут быть представлены в файле или во время передачи по Интернет. Поскольку некоторые кодировки могут прямо не представлять все символы, которые автор захочет включить в документ, HTML предлагает другие механизмы, называемые ссылками на символы, для ссылки на любой символ.</p>\r\n\r\n<p>Поскольку в человеческих языках имеется огромное количество символов и множество способов их представления, следует позаботиться о том, чтобы эти документы могли понимать агенты пользователей во всем мире.</p>\r\n\r\n<p>Для обеспечения возможность взаимодействия сетей SGML требует от каждого приложения (включая HTML) указания набора символов документа. Документ включает:</p>\r\n\r\n<p>ѕ Репертуар: Набор абстрактных символов, таких как латинская буква &laquo;A&raquo;, кириллическая буква &laquo;I&raquo;, китайский иероглиф &laquo;вода&raquo; и т.д.</p>\r\n\r\n<p>ѕ Коды: Набор целочисленных ссылок на символы репертуара.</p>\r\n\r\n<p>Каждый документ SGML (включая каждый документ HTML) - это последовательность символов из репертуара. Компьютерные системы идентифицируют каждый символ по его коду; например, в наборе символов ASCII коды 65, 66 и 67 означают символы &#39;A&#39;, &#39;B&#39; и &#39;C&#39; соответственно.</p>\r\n\r\n<p>Набора символов ASCII недостаточно для такой глобальной информационной системы, как Web, поэтому HTML использует более полный набор символов, называемый Универсальным набором символов (Universal Character Set - UCS), и определенный в [ISO10646]. Этот стандарт определяет репертуар тысяч символов, используемых во всем мире.</p>\r\n\r\n<p>Набор символов, определенный в [ISO10646] - это посимвольный эквивалент Unicode 2.0 ([UNICODE]). Оба эти стандарта время от времени обновляются, пополняются новыми символами, об изменениях следует узнавать на соответствующих серверах Web. В этой спецификации ISO/IEC-10646 или Unicode означают этот самый набор символов. Однако в спецификации HTML Unicode также упоминается при обсуждении других вопросов, таких как алгоритм двунаправленного текста.</p>\r\n\r\n<p>Набора символов документа, однако, недостаточно, чтобы агенты пользователей могли корректно интерпретировать документы HTML при типичном обмене - закодированные как последовательность байт в файле или во время передачи по сети. Агенты пользователя должны также знать кодировки символов, которые использовались для преобразования потока символов документа в поток байт.</p>\r\n\r\n<p>Кодировки символов в этой спецификации имеют другие названия в других спецификациях (что может вызвать некоторую путаницу). Однако это понятие в Интернет означает примерно одно и то же. Одно и то же имя - &laquo;charset - набор символов&raquo; - используется в заголовках протоколов, атрибутах и параметрах, ссылающихся на символы и использующих одни и те же значения из [IANA] реестра (полный список см. в разделе [CHARSETS]).</p>\r\n\r\n<p>Параметр &laquo;charset&raquo; идентифицирует кодировку символов, которая является способом преобразования последовательности байт в последовательность символов. Это преобразование естественно вписывается в схему деятельности Web: серверы отправляют документы HTML агентам пользователей в виде потока байт; агенты пользователей интерпретируют их как последовательность символов. Способы преобразования могут меняться от простого соответствия один к одному до сложных схем или алгоритмов переключения.</p>\r\n\r\n<p>Простой техники кодировки &laquo;один байт - один символ&raquo; недостаточно для текстовых строк с таким широким репертуаром символов, как [ISO10646]. Кроме кодировок всего набора символов (например, UCS-4), имеются некоторые другие кодировки частей [ISO10646].</p>\r\n\r\n<p>Средства разработки (например, текстовые редакторы) могут кодировать документы HTML в кодировках по своему выбору, и этот выбор существенно зависит от соглашений, используемых системным программным обеспечением. Эти средства могут использовать любую удобную кодировку, включающую большинство символов в документе, при условии, что кодировка корректно помечена. Некоторые символы, не включенные в эту кодировку, можно представить с помощью ссылок на символы. Это всегда относится к набору символов документа, а не к кодировке символов.</p>\r\n\r\n<p>Серверы и прокси могут изменять кодировку символов (что называется транскодированием) на лету для выполнения запросов агентов пользователей (см. раздел 14.2 [RFC2068], заголовок запроса HTTP &laquo;Accept-Charset&raquo;). Серверы и прокси не должны обслуживать документ в кодировке, включающей весь набор символов документа.</p>\r\n\r\n<p>Широко используемые в Web кодировки - ISO-8859-1 (также называется &laquo;Latin-1&raquo;; используется для большинства западноевропейских языков), ISO-8859-5 (с поддержкой кириллицы), SHIFT_JIS (японская кодировка), EUC-JP (еще одна японская кодировка) и UTF-8 (вариант кодировки ISO 10646, использующий разное число байт для разных символов). Названия кодировок символов не учитывают регистр, так что, например, &laquo;SHIFT_JIS&raquo;, &laquo;Shift_JIS&raquo; и &laquo;shift_jis&raquo; эквивалентны.</p>\r\n\r\n<p>Эта спецификация не определяет, какие кодировки символов должен поддерживать агент пользователя.</p>\r\n\r\n<p>Соответствующие агенты пользователей должны корректно отображать в Unicode все символы в любых кодировках, которые они могут распознавать.</p>\r\n\r\n<p>Когда текст HTML передается в UTF-16 (charset=UTF-16), текстовые данные должны передаваться в сетевом порядке байт (&laquo;big-endian&raquo;, байт высшего порядка - первый) в соответствии с [ISO10646], раздел 6.3 и [UNICODE], положение C3, страница 3-1.</p>\r\n\r\n<p>Более того, чтобы повысить вероятность правильной интерпретации, рекомендуется передавать документы UTF-16, всегда начиная с символа НЕ РАЗДЕЛЯЮЩИЙ ПРОБЕЛ НУЛЕВОЙ ШИРИНЫ (шестнадцатеричный код FEFF, также называется Меткой порядка байтов (Byte Order Mark - BOM)), который при обращении байт становится шестнадцатеричным FFFE, никогда не назначаемым символом. Таким образом, агент пользователя, получивший шестнадцатеричный код FFFE в качестве первых байтов текста будет знать, что в остальном тексте байты нужно обратить.</p>\r\n\r\n<p>Не следует использовать формат трансформации UTF-1 [ISO10646] (зарегистрированный IANA как ISO-10646-UTF-1). Информацию об ISO 8859-8 и двунаправленном алгоритме см. в разделе двунаправленности и кодировки символов.</p>\r\n\r\n<p>Как сервер определяет, какая кодировка символов применяется в документе? Некоторые серверы проверяют первые несколько байт документа или сверяются с базой данных известных файлов и кодировок. Многие современные серверы Web предоставляют администраторам больше возможностей управления конфигурацией набора символов, чем старые серверы. Администраторы серверов Web должны при возможности использовать следующие механизмы для отправки параметра &laquo;charset&raquo;, но должны позаботиться о том, чтобы не установить для документов ошибочное значение параметра &laquo;charset&raquo;.</p>\r\n\r\n<p>Как агент пользователя узнает, какая использовалась кодировка символов? Эту информацию предоставляет сервер. Лучшим способом проинформировать агента пользователя о кодировке символов документа - использовать параметр &laquo;charset&raquo; в поле заголовка &laquo;Content-Type&raquo; протокола HTTP ([RFC2068], разделы 3.4 и 14.18) Например, следующий заголовок HTTP объявляет, что используется кодировка EUC-JP:</p>\r\n\r\n<p>Content-Type: text/html; charset=EUC-JP</p>\r\n\r\n<p>Определение text/html см. в разделе соответствие.</p>\r\n\r\n<p>Протокол HTTP ([RFC2068], раздел 3.7.1) считает ISO-8859-1 кодировкой символов по умолчанию, если параметр &laquo;charset&raquo; в поле заголовка &laquo;Content-Type&raquo; отсутствует. На практике эта рекомендация бесполезна, поскольку некоторые серверы не позволяют отправлять параметр &laquo;charset&raquo;, а некоторые могут не быть сконфигурированы для отправки этого параметр. Поэтому агенты пользователей не должны предполагать никакого значения параметра &laquo;charset&raquo;.</p>\r\n\r\n<p>Для указания ограничений сервера или конфигурации документы HTML могут включать явную информацию о кодировке символов документа; для предоставления такой информации агентам пользователя может использоваться элемент META.</p>\r\n\r\n<p>Например, чтобы указать, что кодировкой символов в текущем документе является &laquo;EUC-JP&raquo;, включите следующее объявление META:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Объявление META должно использоваться, только если кодировка символов упорядочена так, что символы ASCII стоят на своем месте (по крайней мере, при разборе элемента META). Объявления META должны быть в тексте как можно раньше в элементе HEAD.</p>\r\n\r\n<p>В случаях, когда ни протокол HTTP, ни элемент META не предоставляют информации о кодировке документа, HTML предоставляет атрибут charset для некоторых элементов. Объединив все эти механизмы, автор может существенно повысить шансы на то, что, когда пользователь загружает ресурс, агент пользователя распознает кодировку символов.</p>\r\n\r\n<p>Подводя итоги, соответствующие агенты пользователей при определении кодировки символов документа (от высшего приоритета к низшему) должны руководствоваться следующими источниками в соответствии с приоритетом:</p>\r\n\r\n<p>Параметр &laquo;charset&raquo; протокола HTTP в поле &laquo;Content-Type&raquo;.</p>\r\n\r\n<p>Объявление META, в котором для &laquo;http-equiv&raquo; установлено &laquo;Content-Type&raquo; и установлено значение для &laquo;charset&raquo;.</p>\r\n\r\n<p>Атрибут charset устанавливается на элемент, обозначающий внешний ресурс.</p>\r\n\r\n<p>Кроме этого списка приоритетов, агент пользователя может использовать эвристические установки и установки пользователя. Например, многие агенты пользователей используют эвристику для распознавания различных кодировок, используемых для японского языка. Агенты пользователей обычно имеют определяемую пользователем локальную кодировку по умолчанию, которую они используют, если нет указаний кодировки.</p>\r\n\r\n<p>Агенты пользователей могут обеспечивать механизм, позволяющий пользователям изменять некорректную информацию о наборе символов. Однако если агент пользователя предлагает такой механизм, он должен предлагать его только для просмотра, а не для изменения, во избежание создания Web-страниц с некорректным параметром &laquo;charset&raquo;.</p>\r\n\r\n<p>Примечание. Если в каком-то приложении нужно использовать символы, не входящие в кодировку [ISO10646], этим символам должна быть назначена персональная зона во избежание конфликтов с настоящей или будущими версиями стандарта. Однако это не рекомендуется из соображений переносимости.</p>\r\n\r\n<p>Данная кодировка символов может не содержать все символы из набора символов документа. Для таких кодировок или для таких конфигураций оборудования и программного обеспечения, не позволяющих пользователям вводить определенные символы, авторы могут использовать ссылки на символы SGML. Ссылки на символы - это независимый от кодировки механизм ввода любых символов.</p>\r\n\r\n<p>Ссылки на символы в HTML могут принимать две формы:</p>\r\n\r\n<p>Числовые ссылки на символы (десятичные или шестнадцатеричные).</p>\r\n\r\n<p>Ссылки на комбинации символов.</p>\r\n\r\n<p>Ссылки на символы в комментариях не имеют значения; они являются только данными комментариев.</p>\r\n\r\n<p>Примечание. HTML обеспечивает другие способы представления символов, в частности, встроенные изображения.</p>\r\n\r\n<p>Примечание. В SGML можно в некоторых случаях не использовать заключительный символ&raquo;;&raquo; после ссылки на символы (например, в символе переноса строки или непосредственно перед тэгом). В других обстоятельствах их нельзя удалять (например, в середине слова). Мы предлагаем использовать&raquo;;&raquo; всегда во избежание проблем с агентами пользователей, для которых этот символ обязателен.</p>\r\n\r\n<p>Числовые ссылки на символы указывают код символа в наборе символов документа. Числовые ссылки на символы могут также принимать две формы:</p>\r\n\r\n<p>Синтаксис &laquo;&amp;#D;&raquo;, где D - десятичное число, указывает символ Unicode с десятичным номером D.</p>\r\n\r\n<p>Синтаксис &laquo;&amp;#xH;&raquo; или &laquo;&amp;#XH;&raquo;, где H - шестнадцатеричное число, указывает на символ Unicode с шестнадцатеричным номером H. Шестнадцатеричные числовые ссылки учитывают регистр.</p>\r\n\r\n<p>Вот некоторые примеры числовых ссылок на символы:</p>\r\n\r\n<p>&aring; (десятичное) представляет букву &laquo;a&raquo; с кружком сверху (используемую, например, в норвежском языке).</p>\r\n\r\n<p>&aring; (шестнадцатеричное) представляет тот же символ.</p>\r\n\r\n<p>&aring; (шестнадцатеричное) представляет тот же символ.</p>\r\n\r\n<p>И (десятичное) представляет кириллическую заглавную букву &laquo;I&raquo;.</p>\r\n\r\n<p>水 (шестнадцатеричное) представляет китайский иероглиф &laquo;вода&raquo;.</p>\r\n\r\n<p>Примечание. Хотя шестнадцатеричное представление не определено в [ISO8879], оно ожидается в новой версии, как описано в [WEBSGML]. Это соглашение особенно полезно, поскольку стандарты символов обычно используют шестнадцатеричные представления.</p>\r\n\r\n<p>Чтобы дать авторам более инициативный способ использования символов, HTML предлагает набор character entity references. Комбинации ссылок на символы используют символические имена, так что авторам не придется запоминать коды. Например, комбинация&nbsp;&aring; обозначает символ &laquo;a&raquo; нижнего регистра с кружком сверху; &laquo;&aring;&raquo; легче запомнить, чем&nbsp;&aring;.</p>\r\n\r\n<p>HTML 4.0 не определяет character entity reference для каждого символа. Например, для кириллической буквы &laquo;I&raquo; нет character entity reference. См. полный список ссылок на символы, определенные в HTML 4.0.</p>\r\n\r\n<p>Комбинации ссылок на символы учитывают регистр. Так,&nbsp;&Aring; указывает на другой символ (A с кружком верхнего регистра), а не на&nbsp;&aring; (a с кружком нижнего регистра).</p>\r\n\r\n<p>Авторы, которые хотят поместить в текст символ &laquo;&lt;&raquo;, должны использовать ссылку &laquo;&lt;&raquo; (десятичный код ASCII 60) во избежание возможной путаницы с началом тэга (открывающий разделитель начального тэга). Точно так же следует использовать &laquo;&gt;&raquo; (десятичный код ASCII 62) вместо &laquo;&gt;&raquo;, чтобы избежать проблем со старыми версиями агентов пользователей, некорректно принимающих их за окончание тэга (закрывающий разделитель тэга).</p>\r\n\r\n<p>Авторам следует использовать &laquo;&amp;&raquo; (десятичный код ASCII 38) вместо &laquo;&amp;&raquo; во избежание путаницы со ссылками на символы (открывающий разделитель entity reference). Авторам также следует использовать &laquo;&amp;&raquo; в значениях атрибутов, поскольку ссылки на символы внутри значений атрибута CDATA разрешены.</p>\r\n\r\n<p>Некоторые авторы используют character entity reference &laquo;&quot;&raquo; для кодирования экземпляров двойных кавычек (&raquo;), поскольку этот символ может использоваться для разделения значений атрибутов.</p>\r\n\r\n<p>Возможно, агент пользователя не сможет отобразить все символы в документе, например, из-за отсутствия соответствующего шрифта или если символ имеет значение, которое не может быть выражено во внутренней кодировке агента пользователя и т.д.</p>\r\n\r\n<p>Поскольку в этом случае есть несколько вариантов, этот документ не предписывает определенной тактики. В зависимости от применения непечатные символы могут также обрабатываться дополнительной системой отображения, а не самим приложением. В случае более сложного поведения, например, настроенного для определенного сценария или языка, рекомендуем следующее поведение для агентов пользователей:</p>\r\n\r\n<p>Примите явно видимый, но незаметный механизм для предупреждения пользователя об отсутствующих ресурсах.</p>\r\n\r\n<p>Если отсутствующие символы представляются в другом числовом представлении, используйте шестнадцатеричную (не десятичную) форму, поскольку эта форма используется в стандартах наборов символов.</p>\r\n', '<p>HTML происходит из SGML, который всегда был языком определения структурной разметки. По мере развития HTML все большее количество его элементов и атрибутов для представления заменяется другими механизмами, в частности, таблицами стилей. Опыт показывает, что отделение структуры документа от аспектов его представления снижает стоимость обслуживания широкого диапазона платформ, носителей и т.д. и упрощает изменение документов...</p>\r\n', '2021-05-06'),
(4, 'Зачем понадобилось разделять содержимое и оформление html страниц?', '<p>На заре веб-разработки html использовался не только для создания структуры документа, но и для его оформления. Это приводило не просто к тому, что страницы выглядели неказисто и однообразно, а к тому, что код страницы становился крайне громоздким и сложным для восприятия, к тому же процесс корректировки внешнего вида становился достаточно нетривиальной задачей, поскольку для изменения оформления нескольких элементов необходимо было поменять оформление каждого из них вручную.</p>\r\n\r\n<p>Пример кода с оформлением на чистом html:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>&lt;h1 align=\"center\"&gt;Главный заголовок страницы&lt;/h1&gt;\r\n&lt;font face\"Cuprum\",Arial,Verdana \"  size=\"3\" color=\"#060606\"&gt;\r\n	Текст страницы\r\n&lt;/font&gt;\r\n&lt;hr size=\"1px\" width=\"980px\"  color=\"#c8c8c8\" align=\"left\"/&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Теперь пройдемся подробнее по&nbsp;<strong>основным причинам перехода от чистого html к html + css</strong>:</p>\r\n\r\n<ul>\r\n	<li>Слишком громоздкий код страницы значительно увеличивал размер файла, что ухудшало время загрузки страницы и увеличивало нагрузку на сервер.</li>\r\n	<li>Смешивание &laquo;логической&raquo; и &laquo;визуальной&raquo; части оформления приводило к ухудшению индексации страниц поисковыми роботами.</li>\r\n	<li>Адаптация внешнего вида сайта под различные типы браузеров и устройств становилась невозможна.</li>\r\n	<li>Код становился &laquo;грязным&raquo; не читабельным, что усложняло его поддердку веб-разработчиками.</li>\r\n	<li>Ограниченность функционала оформления тегами приводила к однообразному и пресному внешнему виду сайтов. При помощи одних только атрибутов невозможно настроить полноценное оформление сайта.</li>\r\n	<li>Внесение изменений в дизайн становилось крайне трудоемкой задачей, поскольку оформление приходилось менять каждому конкретному элементу, без возможности задания его целой группе элементов в один прием.</li>\r\n</ul>\r\n\r\n<p>После внедрения стандарта css он решил множество проблем и позволил наконец html-лю стать тем, чем он и задумывался- языком логической разметки документа.</p>\r\n\r\n<h3>Что изменилось с внедрением css?</h3>\r\n\r\n<ul>\r\n	<li>Разделение структуры документа на логическую разметку и оформление сделало код значительно &laquo;чище&raquo;, тоесть читабельней, понятней для восприятия.</li>\r\n	<li>Появилась возможность адаптации сайтов для различных устройств за счет подключения для них различных правил оформления.</li>\r\n	<li>Один файл css может оформлять все страницы сайта, что позволяет значительно снизить трудоемкость веб-разработки, размер сайта в целом.</li>\r\n	<li>Простота применения каскадных таблиц стилей значительно сократила время на веб-разработку.</li>\r\n	<li>За счет кеширования файла с оформлением сайта на порядок ускорилось время загрузки страниц сайтов и снизилась нагрузка на сервера в целом.</li>\r\n</ul>\r\n\r\n<h3>Подводя итоги</h3>\r\n\r\n<p>CSS это революционная для своего времени технология перевернувшая мир веб-разработки с ног на голову много лет назад. На сегодняшний день это официальный стандарт повсеместно использующийся в веб-разработке для оформления логической части сайтов. Он достаточно прост в освоении и крайне гибок в использовании.</p>\r\n', '<p>На заре веб-разработки html использовался не только для создания структуры документа, но и для его оформления. Это приводило не просто к тому, что страницы выглядели неказисто и однообразно, а к тому, что код страницы становился крайне громоздким и сложным для восприятия, к тому же процесс корректировки внешнего вида становился достаточно нетривиальной задачей, поскольку для изменения оформления нескольких элементов необходимо было поменять оформление каждого из них вручную...</p>\r\n', '2021-04-28'),
(6, 'Основные составляющие документа', '<p>Веб-страницы могут и будут отличаться друг от друга, но все они, преимущественно, состоят из аналогичных стандартных компонентов, если только страница не отображает полноэкранное видео или игру, не является частью какого-либо художественного проекта или просто плохо структурирована:</p>\r\n\r\n<p>Заголовок (колонтитул)</p>\r\n\r\n<p>Обычно это большая полоса вверху страницы,&nbsp;с крупным заголовком и / или логотипом. Здесь указывается общая информация о веб-сайте, не меняющаяся от страницы к странице.</p>\r\n\r\n<p>Навигационное меню</p>\r\n\r\n<p>Ссылки на основные разделы сайта; обычно в виде кнопок, ссылок или вкладок.&nbsp;Также как и заголовок, навигация остаётся неизменной&nbsp;на всех страницах сайта&nbsp;&mdash; наличие непоследовательной навигации на вашем сайте запутает и разочарует пользователей.&nbsp;Многие веб-дизайнеры считают панель навигации частью заголовка, а не отдельным компонентом, но это не является обязательным требованием; на самом деле, некоторые также утверждают, что их разделение на отдельные компоненты улучшает&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Learn/Accessibility\">доступность</a>, поскольку раздельная структура будет понятнее для людей, пользующихся считывателями экрана.</p>\r\n\r\n<p>Основное содержимое</p>\r\n\r\n<p>Большая область&nbsp;в центре страницы, содержащая, в основном,&nbsp;уникальный контент&nbsp;данной веб-страницы, например&nbsp;видео, которое вы хотите посмотреть, или рассказ, который вы читаете, или карту, которую вы хотите просмотреть, или заголовки новостей и т.&nbsp;д. Это одна из частей сайта, которая определённо будет меняться от страницы к странице!</p>\r\n\r\n<p>Боковая панель</p>\r\n\r\n<p>Как правило, содержит некоторую второстепенную информацию, ссылки, цитаты, рекламу и т.д. Обычно она относится к содержимому в основном контенте (например, на странице со статьёй, боковая панель может содержать биографию автора или ссылки на связанные статьи), но в некоторых случаях здесь размещают&nbsp;и другие элементы, например, вторичную навигационную систему.</p>\r\n\r\n<p>Нижний колонтитул (футер)</p>\r\n\r\n<p>Полоса в нижней части страницы, которая обычно содержит уведомления об авторских правах или контактную информацию. Это место для размещения общей информации (например, заголовка), но обычно эта информация не является критичной или вторична для самого веб-сайта. Нижний колонтитул также иногда используется для&nbsp;<a href=\"https://developer.mozilla.org/ru/docs/Glossary/SEO\">SEO</a>&nbsp;целей, предоставляя ссылки для быстрого доступа к популярному контенту.</p>\r\n\r\n<p>&quot;Типичный веб-сайт&quot;&nbsp;может быть структурирован примерно так:</p>\r\n\r\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/17069/Sample_website__ru.png\" style=\"float:left; height:388px; width:800px\" /></p>\r\n', '<p>Веб-страницы могут и будут отличаться друг от друга, но все они, преимущественно, состоят из аналогичных стандартных компонентов, если только страница не отображает полноэкранное видео или игру, не является частью какого-либо художественного проекта или просто плохо структурирована...</p>\r\n', '2021-05-06');

-- --------------------------------------------------------

--
-- Структура таблицы `dsssl_xsl`
--

CREATE TABLE `dsssl_xsl` (
  `id` int(11) NOT NULL,
  `ar_name` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `article` text COLLATE utf8mb4_unicode_ci,
  `description` text COLLATE utf8mb4_unicode_ci,
  `date` date DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `dsssl_xsl`
--

INSERT INTO `dsssl_xsl` (`id`, `ar_name`, `article`, `description`, `date`) VALUES
(7, 'DSSSL Online in context', '<p>\r\n	DSSSL (Document Style Semantics and Specification Language) is an International Standard, ISO/IEC 10179:1996, for specifying document transformation and formatting in a platform- and vendor-neutral manner. DSSSL can be used with any document format for which a property set can be defined according to the Property Set Definition Requirements of ISO/IEC 10744. In particular, it can be used to specify the presentation of documents marked up according to ISO 8879:1986, Standard Generalized Markup Language (SGML).</p>\r\n<p>\r\n	DSSSL consists of two main components: a transformation language and a style language. The transformation language is used to specify structural transformations on SGML source files. For example, a telephone directory structured as a series of entries ordered by last name could, by applying a transformation spec, be rendered as a series of entries sorted by first name instead. The transformation language can also be used to specify the merging of two or more documents, the generation of indexes and tables of contents, and other operations. While the transformation language is a powerful tool for gaining the maximum use from document databases, the focus in early DSSSL implementations will be on the style language component.</p>\r\n<p>\r\n	Within the style language, it is possible to identify a number of capabilities that for one reason or another should be considered optional for early implementations. Recognizing this, the designers of DSSSL designated certain features of the style language as optional and created a Core Query Language and a Core Expression Language specifically in order to make more limited implementations possible. However, they did not define any particular subset of the style language component within the standard itself, but rather left that task to industry organizations and standards bodies. This application profile is intended to be one such specification.</p>\r\n<p>\r\n	The current document grew out of discussions on the former DSSSL-Lite mailing list during the period from September through November 1995. These discussions culminated in a December 9, 1995 meeting of key SGML and DSSSL implementors in Boston hosted by Jon Bosak of Novell and chaired by the late Yuri Rubinsky of SoftQuad. The application profile resulting from that meeting was published on the Internet on December 12, 1995 as the document do951212.htm and announced at a workshop of the Fourth International World Wide Web Conference the same day.</p>\r\n<p>\r\n	In August 1996, the application profile was updated by Jon Bosak (now an employee of Sun Microsystems) to correct a number of discrepancies between the summary descriptions of flow object characteristics, which had been based on the September 1995 committee draft of the DSSSL specification, and the final DSSSL standard published in April 1996, and also to add certain optional features that are by consensus of the active DSSSL implementors now considered to be part of a minimal DSSSL implementation. These features include lambda, keywords, and let (including letrec, let*, and named let). This document is archived at sunsite.unc.edu in the directory /pub/sun-info/standards/dsssl/dssslo, from which it can be obtained by anonymous FTP.</p>\r\n', '<p>\r\n	DSSSL (Document Style Semantics and Specification Language) is an International Standard, ISO/IEC 10179:1996, for specifying document transformation and formatting in a platform- and vendor-neutral manner. DSSSL can be used with any document format for which a property set can be defined according to the Property Set Definition Requirements of ISO/IEC 10744. In particular, it can be used to specify the presentation of documents marked up according to ISO 8879:1986, Standard Generalized Markup Language (SGML)...</p>\r\n', '2021-04-28'),
(6, 'DSSSL. Определения', '<p>\r\n	<b>DSSSL</b> (англ.&nbsp;<span lang=\"en\" style=\"font-style:italic;\">Document Style Semantics and Specification Language</span>&nbsp;&mdash; язык описания семантики и стиля документа)&nbsp;&mdash; язык для описания стилей SGML-документов, базирующийся на подмножестве языка программирования Scheme. DSSSL является предком CSS. Однако CSS применяется только для представления HTML и XML-документов, и при этом для преобразования структуры этих документов используется XSL. DSSSL же может использоваться в обеих целях.</p>\r\n<p>\r\n	Хотя DSSSL совместим с любыми SGML-форматами, используется он преимущественно с документами DocBook.</p>\r\n<p>\r\n	DSSSL - официальный стандарт ISO/IEC, определяющий язык управления способом форматирования SGML-документов для отображения их браузерами, программами печати и средствами различных других приложений. Спецификации этого языка были разработаны W3C и в дальнейшем были приняты ISO/IEC в качестве официального международного стандарта. Основу DSSSL составляет механизм таблиц стилей. Язык DSSSL послужил источником идей в разработке стандарта CSS1 для форматной разметки HTML- и XML-документов.<br />\r\n	Действующая версия языка DSSSL определяется принятым в 1996 г. официальным стандартом ISO/IEC 10179:1996.</p>\r\n', '<p>\r\n	<b>DSSSL</b>&nbsp;(англ.&nbsp;<span lang=\"en\" style=\"font-style: italic;\">Document Style Semantics and Specification Language</span>&nbsp;&mdash; язык описания семантики и стиля документа)&nbsp;&mdash; язык для описания стилей SGML-документов, базирующийся на подмножестве языка программирования Scheme. DSSSL является предком CSS. Однако CSS применяется только для представления HTML и XML-документов, и при этом для преобразования структуры этих документов используется XSL. DSSSL же может использоваться в обеих целях...</p>\r\n', '2021-04-28'),
(4, 'Языки XSL(T)', '<p><strong>XSLT&nbsp;</strong>&mdash; язык для преобразования XML документов.</p>\r\n\r\n<ul>\r\n	<li><strong>XPath&nbsp;</strong>&mdash; язык для навигации по элементам и атрибутам XML документа.</li>\r\n	<li><strong>XQuery&nbsp;</strong>&mdash; язык, позволяющий делать выборки из XML данных.</li>\r\n</ul>\r\n\r\n<p>В HTML используются предопределенные теги, значение и способ отображения которых хорошо понятны.</p>\r\n\r\n<p>CSS используется для добавления стилей элементам HTML.</p>\r\n\r\n<p>В XML используются теги не определенные заранее, что делает значение каждого тега не ясным изначально.</p>\r\n\r\n<p>Например, элемент &lt;table&gt; в HTML означает таблицу и ничего другого. В XML этот элемент может означать все что угодно &mdash; таблицу, стол и т.&nbsp;д. &mdash; и браузеры не знают наверняка, как его отображать.</p>\r\n\r\n<p>И здесь на помощь приходит XSL, который позволяет описать, как элементы XML должны отображаться в браузере.</p>\r\n\r\n<h3>XSL &mdash; больше, чем просто язык таблицы стилей</h3>\r\n\r\n<p>XSL состоит из четырех частей:</p>\r\n\r\n<ul>\r\n	<li>XSLT &mdash; язык преобразования XML документов</li>\r\n	<li>XPath &mdash; язык для навигации по элементам XML документа</li>\r\n	<li>XSL-FO &mdash; язык для форматирования XML документов (разработка остановлена в 2013 году)</li>\r\n	<li>XQuery &mdash; язык, позволяющий делать выборки из XML данных</li>\r\n</ul>\r\n\r\n<p><strong>Примечание</strong>: Представив в 2013 году модуль CSS3 Paged Media Module, консорциум W3C определил новый стандарт форматирования документов. Таким образом, с 2013 года CSS3 позиционируется, как замена языка XSL-FO.</p>\r\n\r\n<h3>Что такое XSLT?</h3>\r\n\r\n<ul>\r\n	<li>XSLT означает преобразование или трансформация XSL (от англ. XSL Transformations)</li>\r\n	<li>XSLT является наиболее важной частью языка XSL</li>\r\n	<li>XSLT преобразовывает XML документ в другой XML документ</li>\r\n	<li>XSLT для навигации по XML документу использует язык XPath</li>\r\n</ul>\r\n\r\n<h3>XSLT &mdash; наиболее важная часть языка XSL</h3>\r\n\r\n<p>XSLT используется для преобразования XML документа в другой XML документ или в другой тип документа, распознаваемый браузером, например, HTML и XHTML. Обычно, XSLT делает это преобразовывая каждый XML элемент в (X)HTML элемент.</p>\r\n\r\n<p>При помощи XSLT можно добавлять/удалять элементы и атрибуты в конечный файл. Также, можно реорганизовывать и сортировать элементы, выполнять тесты, определять, какие элементы скрыть или отобразить, и многое другое.</p>\r\n\r\n<p>В общих словах процесс преобразования можно описать следующим образом &mdash; XSLT преобразовывает исходное дерево XML в XML дерево-результат.</p>\r\n\r\n<h3>XSLT использует XPath</h3>\r\n\r\n<p>Для поиска информации в XML документе XSLT использует язык XPath. Язык XPath (подробнее см.&nbsp;<a href=\"https://msiter.ru/tutorials/xpath\" title=\"Учебник по XPath\">Учебник XPath</a>) позволяет перемещаться по элементам и атрибутам XML документа.</p>\r\n\r\n<h3>Как это работает?</h3>\r\n\r\n<p>В процессе преобразования XSLT при помощи XPath определяет те части исходного документа, которые должны соответствовать одному или нескольким предопределенным шаблонам. Если соответствие будет найдено, то XSLT преобразует эту часть исходного документа и создаст конечный документ.</p>\r\n\r\n<h3>Поддержка XSLT</h3>\r\n\r\n<p>Все основные браузеры поддерживают XSLT и XPath.</p>\r\n', '<p><strong>XSLT&nbsp;</strong>&mdash; язык для преобразования XML документов.</p>\r\n\r\n<ul>\r\n	<li><strong>XPath&nbsp;</strong>&mdash; язык для навигации по элементам и атрибутам XML документа.</li>\r\n	<li><strong>XQuery&nbsp;</strong>&mdash; язык, позволяющий делать выборки из XML данных...</li>\r\n</ul>\r\n', '2021-04-28');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `login` char(15) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `password` char(15) COLLATE utf8mb4_unicode_ci NOT NULL,
  `cookie` varchar(65) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `is_admin` varchar(1) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'f'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `login`, `password`, `cookie`, `is_admin`) VALUES
(1, 'la1nus', 'Fktrcfylh2', 'vzRHXW8xCl3N0zfK6pCqbxS55sY2LvQnAplQKCOla4BmgLQ035DSoVwFDvDJDGuU', 'f'),
(10, 'Admin', 'Admin', '5tsFm6VRimMSW2hXyuNMMjfULhV1JrkB9EyEhoEStzdQa4WyxHqqSClu41vnGRQK', 't');

-- --------------------------------------------------------

--
-- Структура таблицы `web_docs`
--

CREATE TABLE `web_docs` (
  `id` int(11) NOT NULL,
  `ar_name` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `article` text COLLATE utf8mb4_unicode_ci,
  `description` text COLLATE utf8mb4_unicode_ci,
  `date` date DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `web_docs`
--

INSERT INTO `web_docs` (`id`, `ar_name`, `article`, `description`, `date`) VALUES
(15, 'Способы добавления стилей на страницу', '<p>Для добавления стилей на веб-страницу существует несколько способов, которые различаются своими возможностями и назначением. Далее рассмотрим их подробнее.</p>\r\n\r\n<h2>Связанные стили</h2>\r\n\r\n<p>При использовании связанных стилей описание селекторов и их значений располагается в отдельном файле, как правило, с расширением css, а для связывания документа с этим файлом применяется тег&nbsp;&lt;link&gt;. Данный тег помещается в контейнер&nbsp;&lt;head&gt;, как показано в примере&nbsp;3.1.</p>\r\n\r\n<p>Пример 3.1. Подключение связанных стилей</p>\r\n\r\n<pre>\r\n<code>&lt;!DOCTYPE HTML&gt;\r\n&lt;html&gt;\r\n &lt;head&gt;\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  &lt;title&gt;Стили&lt;/title&gt;\r\n  &lt;link rel=\"stylesheet\" href=\"mysite.css\"&gt;\r\n  &lt;link rel=\"stylesheet\" href=\"http://www.htmlbook.ru/main.css\"&gt;\r\n &lt;/head&gt;\r\n &lt;body&gt;\r\n   &lt;h1&gt;Заголовок&lt;/h1&gt;\r\n   &lt;p&gt;Текст&lt;/p&gt;\r\n &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Значение атрибута тега&nbsp;&lt;link&gt;&nbsp;&mdash;&nbsp;rel&nbsp;остаётся неизменным независимо от кода, как приведено в данном примере. Значение&nbsp;href&nbsp;задаёт путь к CSS-файлу, он может быть задан как относительно, так и абсолютно. Заметьте, что таким образом можно подключать таблицу стилей, которая находится на другом сайте.</p>\r\n\r\n<p>Содержимое файла mysite.css подключаемого посредством тега&nbsp;&lt;link&gt;&nbsp;приведено в примере&nbsp;3.2.</p>\r\n\r\n<p>Пример 3.2. Файл со стилем</p>\r\n\r\n<pre>\r\n<code>H1 {\r\n  color: #000080;\r\n  font-size: 200%;\r\n  font-family: Arial, Verdana, sans-serif;\r\n  text-align: center;\r\n}\r\nP {\r\n  padding-left: 20px;\r\n}</code></pre>\r\n\r\n<p>Как видно из данного примера, файл со стилем не хранит никаких данных, кроме синтаксиса CSS. В свою очередь и HTML-документ содержит только ссылку на файл со стилем, т.&nbsp;е. таким способом в полной мере реализуется принцип разделения кода и оформления сайта. Поэтому использование связанных стилей является наиболее универсальным и удобным методом добавления стиля на сайт. Ведь стили хранятся в одном файле, а в HTML-документах указывается только ссылка на него.</p>\r\n\r\n<h2>Глобальные стили</h2>\r\n\r\n<p>При использовании глобальных стилей свойства CSS описываются в самом документе и располагаются в заголовке веб-страницы. По своей гибкости и возможностям этот способ добавления стиля уступает предыдущему, но также позволяет хранить стили в одном месте, в данном случае прямо на той же странице с помощью контейнера&nbsp;&lt;style&gt;, как показано в примере&nbsp;3.3.</p>\r\n\r\n<p>Пример 3.3. Использование глобального стиля</p>\r\n\r\n<pre>\r\n<code>&lt;!DOCTYPE HTML&gt;\r\n&lt;html&gt;\r\n &lt;head&gt;\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  &lt;title&gt;Глобальные стили&lt;/title&gt;\r\n  &lt;style&gt;\r\n   H1 { \r\n    font-size: 120%; \r\n    font-family: Verdana, Arial, Helvetica, sans-serif; \r\n    color: #333366; \r\n   }\r\n  &lt;/style&gt;\r\n &lt;/head&gt;\r\n &lt;body&gt;\r\n  &lt;h1&gt;Hello, world!&lt;/h1&gt;\r\n &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>В данном примере задан стиль тега&nbsp;&lt;h1&gt;, который затем можно повсеместно использовать на данной веб-странице (рис.&nbsp;3.1).</p>\r\n\r\n<p><img alt=\"Рис. 3.1\" src=\"http://htmlbook.ru/files/images/samcss/fig3-1.png\" style=\"height:199px; width:382px\" /></p>\r\n\r\n<p>Рис. 3.1. Вид заголовка, оформленного с помощью стилей</p>\r\n\r\n<h2>Внутренние стили</h2>\r\n\r\n<p>Внутренний или встроенный стиль является по существу расширением для одиночного тега используемого на текущей веб-странице. Для определения стиля используется атрибут&nbsp;style, а его значением выступает набор стилевых правил (пример&nbsp;3.4).</p>\r\n\r\n<p>Пример 3.4. Использование внутреннего стиля</p>\r\n\r\n<pre>\r\n<code>&lt;!DOCTYPE HTML&gt;\r\n&lt;html&gt;\r\n &lt;head&gt;\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  &lt;title&gt;Внутренние стили&lt;/title&gt;\r\n &lt;/head&gt;\r\n &lt;body&gt;\r\n  &lt;p style=\"font-size: 120%; font-family: monospace; color: #cd66cc\"&gt;Пример текста&lt;/p&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>В данном примере стиль тега&nbsp;&lt;p&gt;&nbsp;задаётся с помощью атрибута&nbsp;style, в котором через точку с запятой перечисляются стилевые свойства (рис.&nbsp;3.2).</p>\r\n\r\n<p><img alt=\"Рис. 3.2\" src=\"http://htmlbook.ru/files/images/samcss/fig3-2.png\" style=\"height:191px; width:382px\" /></p>\r\n\r\n<p>Рис. 3.2. Использование внутренних стилей для изменения вида текста</p>\r\n\r\n<p>Внутренние стили рекомендуется применять на сайте ограниченно или вообще отказаться от их использования. Дело в том, что добавление таких стилей увеличивает общий объём файлов, что ведет к повышению времени их загрузки в браузере, и усложняет редактирование документов для разработчиков.</p>\r\n\r\n<p>Все описанные методы использования CSS могут применяться как самостоятельно, так и в сочетании друг с другом. В этом случае необходимо помнить об их иерархии. Первым имеет приоритет внутренний стиль, затем глобальный стиль и в последнюю очередь связанный стиль. В примере&nbsp;3.5 применяется сразу два метода добавления стиля в документ.</p>\r\n', '<p>Для добавления стилей на веб-страницу существует несколько способов, которые различаются своими возможностями и назначением. Далее рассмотрим их подробнее.</p>\r\n\r\n<p>Связанные стили</p>\r\n\r\n<p>При использовании связанных стилей описание селекторов и их значений располагается в отдельном файле, как правило, с расширением css, а для связывания документа с этим файлом применяется тег&nbsp;&lt;link&gt;...</p>\r\n', '2021-05-06'),
(14, 'Как подключить Javascript файл к html документу?', '<p>Предположим, что у вас есть html-документ и javascript код, который должен в нем выполняться. Код javacript может находиться как внутри html-документа, так и в отдельном файле формата *.js.&nbsp;</p>\r\n\r\n<p>Проблема, которая очень часто появляется у начинающих пользователей:&nbsp;<strong><strong>Как подключить javacript-код или файл к html документу?</strong></strong>&nbsp;</p>\r\n\r\n<p>В этой небольшой заметке мы рассмотрим, как это можно сделать.&nbsp;</p>\r\n\r\n<p>Пусть содержимое файла html будет следующее:</p>\r\n\r\n<pre>\r\n&lt;!doctype html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;meta charset=&quot;utf-8&quot;&gt;\r\n&lt;title&gt;Документ без названия&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\nСодержимое html-файла\r\n&lt;/body&gt;\r\n&lt;/html&gt;</pre>\r\n\r\n<p>Ничего лишнего. Теперь код, который необходимо подключить:</p>\r\n\r\n<pre>\r\nalert(&quot;Javacript подключен&quot;);</pre>\r\n\r\n<p>Т.е. этот скрипт просто должен вывести всплывающее окно с сообщением, что &quot;Javacript подключен&quot; при открытии файла html-документа. Итак, рассматриваем два варианта подключения скрипта.&nbsp;</p>\r\n\r\n<p><strong>Вариант 1. Подключение внутри html-файла.</strong>&nbsp;</p>\r\n\r\n<p>Делается это с помощью конструкции:</p>\r\n\r\n<pre>\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n&hellip;\r\nКод javascript\r\n&hellip;\r\n&lt;/script&gt;</pre>\r\n\r\n<p>Вставим этот код можно внутри тэга &lt;body&gt;, либо внутри тега &lt;head&gt;. В итоге, содержимое html файла может буть следующим:</p>\r\n\r\n<pre>\r\n&lt;!doctype html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;meta charset=&quot;utf-8&quot;&gt;\r\n&lt;title&gt;Документ без названия&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\nalert(&quot;Javacript подключен&quot;);\r\n&lt;/script&gt;\r\nСодержимое html-файла\r\n&lt;/body&gt;\r\n&lt;/html&gt;</pre>\r\n\r\n<p>Проверяем, что все работает:</p>\r\n\r\n<p><strong><strong><strong><strong><img alt=\"21-10-2014 13-05-32\" src=\"https://webkyrs.info/uploads/1574930702231-5ddf890ea5e8d.png\" style=\"height:143px; width:458px\" /></strong></strong>&nbsp;</strong>&nbsp;</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Отлично. Окно с сообщением появилось.&nbsp;</p>\r\n\r\n<p><strong>Вариант 2. Подключение внешнего файла скрипта с кодом.</strong>&nbsp;</p>\r\n\r\n<p>Если javascript-код находится во внешнем файле, то способ его подключение будет несколько другим. Пусть такой файл называется script.js. О том, как создать javascript файл я писал&nbsp;здесь.&nbsp;</p>\r\n\r\n<p>В итоге, имеем два файла index.html и script.js, которые находятся в одной папке.</p>\r\n\r\n<p>&nbsp;<img alt=\"21-10-2014 13-04-21\" src=\"https://webkyrs.info/uploads/1574930774097-5ddf89566f077.png\" style=\"height:79px; width:164px\" />&nbsp;</p>\r\n\r\n<p>Как теперь подключить скрипт к html файлу? В этом случае нужно воспользоваться тэгом</p>\r\n\r\n<pre>\r\n&lt;script src=&quot;путь_к_файлу_скрипта/script.js&quot;&gt;&lt;/script&gt;</pre>\r\n\r\n<p>Об адресах и как их правильно выставлять информация&nbsp;здесь.&nbsp;</p>\r\n\r\n<p>Так как файл скрипта script.js находится в той же папке, что и файл index.html, то html-код может быть следующим:</p>\r\n\r\n<pre>\r\n&lt;!doctype html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;meta charset=&quot;utf-8&quot;&gt;\r\n&lt;title&gt;Документ без названия&lt;/title&gt;\r\n&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\nСодержимое html-файла\r\n&lt;/body&gt;\r\n&lt;/html&gt;</pre>\r\n\r\n<p>Как правило, скрипты подключаются в области &lt;head&gt; документа. Если все сделано правильно, то вы точно также сможете увидеть всплывающее окно с надписью, что &quot;javascript подключен&quot;. Это два основных способа, как вы можете подключить код javascript к html документу.&nbsp;</p>\r\n', '<p>Предположим, что у вас есть html-документ и javascript код, который должен в нем выполняться. Код javacript может находиться как внутри html-документа, так и в отдельном файле формата *.js.&nbsp;</p>\r\n\r\n<p>Проблема, которая очень часто появляется у начинающих пользователей:&nbsp;<strong><strong>Как подключить javacript-код или файл к html документу?</strong></strong>&nbsp;</p>\r\n\r\n<p>В этой небольшой заметке мы рассмотрим, как это можно сделать.&nbsp;</p>\r\n', '2021-05-06');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `css`
--
ALTER TABLE `css`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `docs`
--
ALTER TABLE `docs`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `dsssl_xsl`
--
ALTER TABLE `dsssl_xsl`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `login` (`login`);

--
-- Индексы таблицы `web_docs`
--
ALTER TABLE `web_docs`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `css`
--
ALTER TABLE `css`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT для таблицы `docs`
--
ALTER TABLE `docs`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT для таблицы `dsssl_xsl`
--
ALTER TABLE `dsssl_xsl`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- AUTO_INCREMENT для таблицы `web_docs`
--
ALTER TABLE `web_docs`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
